{
    "HumanEval/0": "elements (List[float]): A list of floating-point numbers that need to be checked for proximity.\nthreshold (float): A floating-point number representing the maximum allowed difference between any two elements in the list for them to be considered 'close'.",
    "HumanEval/1": "s (str): A string containing groups of parentheses that need to be separated into distinct groups based on their nesting levels.",
    "HumanEval/2": "number (float): The number to be truncated. This parameter represents the floating-point number that you want to truncate to a certain number of decimal places.",
    "HumanEval/3": "operations (List[int]): A list of integers representing a sequence of operations or changes in value.\nthreshold (int): An integer representing the threshold value that should not be exceeded by the cumulative sum of operations.",
    "HumanEval/4": "data (List[float]): A list of numerical values for which the mean absolute deviation is to be calculated.",
    "HumanEval/5": "elements (List[Any]): A list of elements that you want to intersperse with a specified separator.\nseparator (Any): The element that will be inserted between each pair of elements in the list.",
    "HumanEval/6": "expression (str): A string containing nested parentheses that need to be parsed.\n\nopen_paren (str): A string representing the character used for opening parentheses. Typically, this would be '('.\n\nclose_paren (str): A string representing the character used for closing parentheses. Typically, this would be ')'.",
    "HumanEval/7": "1. strings (List[str]): A list of strings that will be filtered based on the presence of a specified substring.\n2. substring (str): The substring that will be used to filter the list of strings. Only strings containing this substring will be included in the result.",
    "HumanEval/8": "a (List[int]): A list of integers for which the sum and product need to be calculated.\nb (List[int]): Another list of integers for which the sum and product need to be calculated.",
    "HumanEval/9": "data (List[int]): A list of integers representing the input sequence over which the rolling maximum is calculated.\nwindow_size (int): An integer representing the size of the window over which the maximum is calculated. This must be a positive integer less than or equal to the length of the data list.",
    "HumanEval/10": "s (str): The input string that needs to be transformed into a palindrome.\n\nallow_rearrange (bool): A flag indicating whether the characters in the string can be rearranged to form a palindrome. If True, the function can rearrange characters; if False, it must use the characters in their original order.",
    "HumanEval/11": "a (str): The first input string to be XORed. It should be of the same length as the second input string.\nb (str): The second input string to be XORed. It should be of the same length as the first input string.",
    "HumanEval/12": "strings (List[str]): A list of strings from which the longest string needs to be identified.",
    "HumanEval/13": "a (int): The first integer for which the greatest common divisor is to be calculated.\nb (int): The second integer for which the greatest common divisor is to be calculated.",
    "HumanEval/14": "input_string (str): The string for which all prefixes need to be generated.",
    "HumanEval/15": "input_string (str): The input string that needs to be processed.\nseparator (str): A character or string used to separate elements in the input string.\nmax_length (int): The maximum length of each element in the resulting sequence.",
    "HumanEval/16": "text (str): A string input for which the function will count the number of distinct characters.",
    "HumanEval/17": "music_data (str): A string containing the music data to be parsed. This could include information such as song titles, artist names, album details, and other metadata.\nformat_type (str): A string specifying the format of the input music data. This could be formats like 'JSON', 'XML', 'CSV', etc., which indicates how the data is structured and should be interpreted.\noptions (dict, optional): A dictionary of additional options that can modify the parsing behavior. This could include flags for case sensitivity, specific fields to extract, or other parsing preferences.",
    "HumanEval/18": "input_list (List[int]): A list of integers where the function will count occurrences of a specific integer.\nvalue (int): The integer value whose occurrences need to be counted in the input_list.",
    "HumanEval/19": "numbers (List[int]): A list of integers that need to be sorted.\nreverse (bool): A boolean flag indicating whether the list should be sorted in descending order. Defaults to False for ascending order.",
    "HumanEval/20": "arr (List[int]): A list of integers from which the closest elements are to be found.\nk (int): The number of closest elements to find.\nx (int): The target integer to which the closest elements are to be found.",
    "HumanEval/21": "data (List[float]): A list of floating-point numbers that need to be rescaled.\nmin_value (float): The minimum value of the range to which the data should be rescaled.\nmax_value (float): The maximum value of the range to which the data should be rescaled.",
    "HumanEval/22": "numbers (List[int]): A list of integers that need to be filtered based on a specific condition.\ncondition (callable): A function that takes an integer as input and returns a boolean indicating whether the integer meets the condition.",
    "HumanEval/23": "s (const char*): A pointer to the first character of a null-terminated string whose length is to be computed. The string must be a valid C-style string, meaning it ends with a null character '\\0'.",
    "HumanEval/24": "number (int): The integer for which the largest divisor is to be found. This number should be greater than 1.",
    "HumanEval/25": "number (int): The integer value that needs to be factorized into its prime factors.",
    "HumanEval/26": "input_list (List[Any]): A list of elements from which duplicates need to be removed. The elements can be of any data type that supports equality comparison.",
    "HumanEval/27": "s (str): The input string whose case needs to be flipped. Each uppercase letter in the string will be converted to lowercase, and each lowercase letter will be converted to uppercase.",
    "HumanEval/28": "str1 (str): The first string to be concatenated.\nstr2 (str): The second string to be concatenated.\nseparator (str, optional): A string to be placed between str1 and str2. Defaults to an empty string if not provided.",
    "HumanEval/29": "prefix (str): The prefix string that will be used to filter the list of strings. Only strings that start with this prefix will be included in the result.\nstrings (List[str]): A list of strings that will be filtered based on the specified prefix.",
    "HumanEval/30": "numbers (List[float]): A list of floating-point numbers from which positive numbers need to be extracted.",
    "HumanEval/31": "number (int): The integer value to be checked for primality. It should be a positive integer greater than 1.",
    "HumanEval/32": "start (float): The starting point of the interval where the function will begin searching for a zero.\nend (float): The ending point of the interval where the function will stop searching for a zero.\nfunction (callable): A function that takes a single float as input and returns a float. This function is used to determine where its output is zero within the given interval.\ntolerance (float, optional): The precision of the result. The function will stop searching when the zero is found within this tolerance. Default is a small positive number, e.g., 1e-7.\nmax_iterations (int, optional): The maximum number of iterations the function will perform to find the zero. Default is a reasonable number, e.g., 1000, to prevent infinite loops.",
    "HumanEval/33": "lst (List[Tuple]): A list of tuples, where each tuple contains three elements. The elements can be of any data type that supports comparison operations.\nindex (int): The index of the element within each tuple that should be used as the key for sorting. This index should be a valid index for the tuples in the list.",
    "HumanEval/34": "elements (List[Any]): A list of elements from which duplicates need to be removed. The elements can be of any data type that supports comparison operations.",
    "HumanEval/35": "elements (List[int]): A list of integers from which the maximum element is to be found.",
    "HumanEval/36": "n (int): The upper limit of the range to apply the FizzBuzz logic. The function will evaluate numbers from 1 to n, inclusive.",
    "HumanEval/37": "numbers (List[int]): A list of integers that need to be sorted. The function will specifically focus on sorting the even numbers within this list, while the odd numbers will remain in their original positions.",
    "HumanEval/38": "cyclic_code (List[int]): A list of integers representing the cyclic code that needs to be decoded.\nkey (int): An integer key used for decoding the cyclic code.",
    "HumanEval/39": "n (int): The number of terms to consider in the Fibonacci sequence.\nstart (int): The starting point of the Fibonacci sequence to begin checking for prime numbers.",
    "HumanEval/40": "nums (List[int]): A list of integers that will be evaluated to find unique triplets that sum to zero.",
    "HumanEval/41": "car_positions (List[float]): A list of floating-point numbers representing the positions of cars on a track.\ncar_speeds (List[float]): A list of floating-point numbers representing the speeds of the cars corresponding to their positions in the car_positions list.\ntime_interval (float): A floating-point number representing the time interval over which to check for collisions.",
    "HumanEval/42": "lst (List[int]): A list of integers that need to be incremented.\nincrement (int): The value by which each element in the list should be increased. This parameter is optional and defaults to 1 if not provided.",
    "HumanEval/43": "numbers (List[int]): A list of integers that will be checked for pairs that sum to zero.",
    "HumanEval/44": "number (int): The integer number that needs to be converted from one base to another.\nfrom_base (int): The base of the input number, which should be between 2 and 36.\nto_base (int): The base to which the input number should be converted, which should also be between 2 and 36.",
    "HumanEval/45": "base (float): The length of the base of the triangle.\nheight (float): The height of the triangle, measured perpendicular to the base.",
    "HumanEval/46": "n (int): The position in the Fibonacci sequence for which the function should calculate the value. This parameter should be a non-negative integer, where 0 corresponds to the first Fibonacci number.\ncache (dict): A dictionary used to store previously computed Fibonacci numbers to optimize the function's performance through memoization. The keys are integers representing positions in the sequence, and the values are the corresponding Fibonacci numbers.",
    "HumanEval/47": "numbers (List[float]): A list of numerical values for which the median is to be calculated. The list can contain integers or floating-point numbers and should not be empty.",
    "HumanEval/48": "input_string (str): The string that needs to be checked for being a palindrome. This string can contain any characters, including letters, numbers, and symbols.",
    "HumanEval/49": "number (float): The number to be modified.\nmodulus (float): The modulus value to be used for the operation.",
    "HumanEval/50": "shift (int): The number of positions each character in the string should be shifted.\nencoded_string (str): The string that has been encoded using a shift cipher and needs to be decoded.",
    "HumanEval/51": "input_string (str): The string from which vowels will be removed. This parameter is expected to be a sequence of characters, including letters, numbers, and symbols.",
    "HumanEval/52": "numbers (List[float]): A list of floating-point numbers to be evaluated.\nthreshold (float): A floating-point number representing the threshold value.",
    "HumanEval/53": "a (int or float): The first number to be added.\nb (int or float): The second number to be added.",
    "HumanEval/54": "string1 (str): The first string to be compared.\nstring2 (str): The second string to be compared.",
    "HumanEval/55": "n (int): The position in the Fibonacci sequence for which the value is to be calculated. It should be a non-negative integer, where 0 corresponds to the first Fibonacci number.",
    "HumanEval/56": "expression (str): A string containing a sequence of characters, which may include various types of brackets such as parentheses '()', square brackets '[]', and curly braces '{}'. The function checks if these brackets are correctly matched and nested within the string.",
    "HumanEval/57": "sequence (List[int]): A list of integers that needs to be checked for monotonicity.",
    "HumanEval/58": "- list1 (List[int]): The first list of integers to be compared.\n- list2 (List[int]): The second list of integers to be compared.",
    "HumanEval/59": "number (int): The integer for which the largest prime factor is to be found. It should be greater than 1.",
    "HumanEval/60": "n (int): The target integer up to which the sum is calculated. It represents the last number in the sequence starting from 1.\n\n",
    "HumanEval/61": "expression (str): A string containing a sequence of characters, which may include parentheses that need to be checked for correct bracketing.\nopen_bracket (str): A string representing the character used as the opening bracket, typically '('.\nclose_bracket (str): A string representing the character used as the closing bracket, typically ')'.",
    "HumanEval/62": "function (callable): The function for which the derivative is to be calculated. This should be a mathematical function that takes a single float as input and returns a float.\npoint (float): The point at which the derivative of the function is to be calculated.\nh (float, optional): A small step size used for calculating the derivative using the finite difference method. Defaults to a small value like 1e-5.",
    "HumanEval/63": "n (int): The position in the Fibonacci sequence for which the function will calculate the value. This parameter should be a non-negative integer.\n\nmemo (dict, optional): A dictionary used to store previously calculated Fibonacci numbers to optimize the function using memoization. This parameter is optional and defaults to an empty dictionary if not provided.",
    "HumanEval/64": "text (str): A string input in which the function will count the number of vowels.",
    "HumanEval/65": "array (List[int]): A list of integers that represents the sequence to be circularly shifted.\nshift (int): An integer that specifies the number of positions by which the elements in the array should be shifted. A positive value indicates a right shift, while a negative value indicates a left shift.",
    "HumanEval/66": "number (int): The integer whose digits are to be summed.",
    "HumanEval/67": "fruit_list (List[str]): A list of strings where each string represents a type of fruit.\npeople_count (int): The number of people among whom the fruits need to be distributed.",
    "HumanEval/68": "array (List[dict]): A list of dictionaries from which to extract values.\nkey (str): The key whose corresponding values need to be extracted from each dictionary in the list.",
    "HumanEval/69": "query (str): The search term or keyword that the function will use to find relevant results.\nitems (List[str]): A list of strings in which the function will search for the query term.\ncase_sensitive (bool, optional): A boolean flag indicating whether the search should be case-sensitive. Defaults to False.",
    "HumanEval/70": "lst (List[int]): A list of integers that need to be sorted in a specific, non-standard order.\norder (List[int]): A list of integers that defines the desired order of elements in the 'lst'. Elements in 'lst' should be rearranged to match the order specified in 'order'.",
    "HumanEval/71": "base (float): The length of the base of the triangle.\nheight (float): The height of the triangle, measured perpendicular to the base.",
    "HumanEval/72": "cargo (List[int]): A list of integers representing the weights of the cargo items.\nmax_weight (int): An integer representing the maximum weight capacity that can be carried.",
    "HumanEval/73": "amount (float): The total amount of money for which the smallest change is to be calculated.\ndenominations (List[float]): A list of available coin denominations to use for making change.",
    "HumanEval/74": "list1 (List[int]): A list of integers to be compared for matches.\nlist2 (List[int]): Another list of integers to be compared against list1 for matches.",
    "HumanEval/75": "number (int): The integer value to be checked if it is a multiply prime number. A multiply prime number is defined as a number that is the product of two or more prime numbers.",
    "HumanEval/76": "base (int): The base number to be raised to a power.\nnumber (int): The number to check if it can be expressed as a power of the base.",
    "HumanEval/77": "number (int): The integer value that needs to be checked if it is a perfect cube.",
    "HumanEval/78": "key (str): A string representing the key to be converted into a hexadecimal format.\nlength (int): An integer specifying the desired length of the resulting hexadecimal string.",
    "HumanEval/79": "number (int): The integer number that needs to be converted to its binary representation.",
    "HumanEval/80": "number (int): The number to be checked if it is a happy number.",
    "HumanEval/81": "score (float): The numerical score for which the corresponding letter grade needs to be determined. This score is typically between 0 and 100, inclusive.",
    "HumanEval/82": "input_list (List[int]): A list of integers for which the function will determine the number of prime numbers present.",
    "HumanEval/83": "lst (List[int]): A list of integers that the function will process to determine if any of the integers start with the digit '1' and end with the digit '1'.",
    "HumanEval/84": "s (str): A string input that represents a mathematical expression or equation that needs to be solved. The string may contain numbers, operators, and possibly other characters that form a valid expression.",
    "HumanEval/85": "a (int or float): The first number to be added.\nb (int or float): The second number to be added.",
    "HumanEval/86": "text (str): The input string that has been shuffled and needs to be restored to its original order.",
    "HumanEval/87": "index (int): The index of the row to retrieve from the DataFrame.\ndata (DataFrame): The DataFrame from which the row is to be retrieved.",
    "HumanEval/88": "array (List[int]): A list of integers that needs to be sorted.\nreverse (bool): A boolean flag indicating whether the array should be sorted in descending order. Defaults to False, meaning the array will be sorted in ascending order if not specified.",
    "HumanEval/89": "text (str): The input string that needs to be encrypted.\nkey (int): An integer value used as the key for the encryption algorithm, determining the shift or transformation applied to the text.",
    "HumanEval/90": "numbers (List[int]): A list of integers from which the function will determine the next smallest number.\ncurrent (int): The current integer for which the function will find the next smallest number in the list.",
    "HumanEval/91": "activity_level (int): A numerical representation of the current activity level, where higher numbers indicate more activity.\ninterest_level (int): A numerical representation of the current interest level, where higher numbers indicate more interest.\nthreshold (int): A numerical value that determines the cutoff point for being considered 'bored'.",
    "HumanEval/92": "number (int): The integer value to be evaluated by the function.\nthreshold (int): The threshold value against which the integer is compared.\noptions (List[int]): A list of integer options that may influence the function's behavior.",
    "HumanEval/93": "input_string (str): The string that needs to be encoded.\nencoding_type (str): The type of encoding to be applied to the input string, such as 'base64', 'utf-8', etc.",
    "HumanEval/94": "number (float): The number to be truncated. This parameter represents the floating-point number that needs to be truncated to a certain precision or format.\n\noperator (str): The algebraic operator to be applied. This parameter is a string that specifies the operation to be performed, such as addition, subtraction, multiplication, or division.\n\noperand (int or float): The number to be used in the algebraic operation. This parameter represents the second number involved in the operation specified by the operator.\n\ns (str): The input string to be solved. This parameter is a string that contains a problem or equation that needs to be solved or processed.\n\ntext (str): The text to be converted to MD5. This parameter is a string that will be hashed using the MD5 algorithm to produce a unique hash value.\n\nnumber (int): The starting integer for the sequence. This parameter represents the first number in a sequence of integers to be generated.\n\nneed (int): The required amount or quantity. This parameter specifies the amount needed for a certain operation or calculation.\n\nremaining (int): The remaining amount or quantity. This parameter indicates the leftover or remaining amount after a certain operation or calculation.\n\na (int): The starting integer for generating a sequence. This parameter represents the lower bound of the range of integers to be generated.\n\nb (int): The ending integer for generating a sequence. This parameter represents the upper bound of the range of integers to be generated.",
    "HumanEval/95": "dictionary (dict): A dictionary where the keys are strings and the values are either strings or lists of strings. This dictionary is checked to determine if all string elements (keys and values) are in the same case (either all uppercase or all lowercase).\ncase_type (str): A string indicating the case type to check for. It can be either 'upper' or 'lower', specifying whether to check if all strings in the dictionary are uppercase or lowercase, respectively.",
    "HumanEval/96": "start (int): The starting integer from which the count begins.\nend (int): The ending integer at which the count stops. This value is inclusive.\nstep (int, optional): The increment between each number in the sequence. Defaults to 1 if not specified.",
    "HumanEval/97": "- a (int or float): The first number to be multiplied.\n- b (int or float): The second number to be multiplied.",
    "HumanEval/98": "text (str): A string in which the function will count the number of uppercase letters.",
    "HumanEval/99": "number (float): The floating-point number that needs to be rounded to the nearest integer.\nrounding_method (str): A string indicating the method of rounding to be used. It can be 'up', 'down', or 'nearest'.",
    "HumanEval/100": "item_list (List[str]): A list of strings representing the items to be piled.\nmax_height (int): An integer representing the maximum allowable height for the pile.\nbase_width (int): An integer representing the width of the base of the pile.",
    "HumanEval/101": "text (str): A string input that contains words separated by spaces.\nseparator (str): A string that specifies the character(s) used to separate words in the output string.",
    "HumanEval/102": "- numbers (List[int]): A list of integers from which a number is to be chosen.\n- target (int): The target integer that the function will use to determine the closest number from the list.\n- tolerance (int): An optional integer that specifies the maximum allowable difference between the chosen number and the target. If not provided, a default value is used.",
    "HumanEval/103": "numbers (List[float]): A list of floating-point numbers for which the average needs to be calculated and rounded.",
    "HumanEval/104": "number (int): The integer number from which unique digits need to be extracted.",
    "HumanEval/105": "lst (List[str]): A list of strings that need to be sorted by their length.\nreverse (bool): A boolean flag indicating whether the list should be sorted in descending order of length. Defaults to False.",
    "HumanEval/106": "number (float): The number to be truncated. This is the input value that will be processed by the function to remove any decimal places beyond a certain precision.\n\nprecision (int, optional): The number of decimal places to retain in the truncated number. If not specified, a default precision level is used. This parameter determines how many digits after the decimal point will be kept in the result.",
    "HumanEval/107": "number (int): The integer number to be checked for being an even or odd palindrome.",
    "HumanEval/108": "numbers (List[int]): A list of integers that need to be counted based on a specific condition.\ncondition (callable): A function that takes an integer as input and returns a boolean indicating whether the integer meets the specified condition.",
    "HumanEval/109": "start_position (int): The initial position of the ball on a linear track.\nend_position (int): The target position to which the ball should be moved.\ntrack (List[int]): A list representing the track, where each element can indicate a specific condition or state of the track at that position.\nobstacles (List[int]): A list of positions on the track that are considered obstacles and should be avoided during the movement of the ball.",
    "HumanEval/110": "amount (float): The amount of currency to be exchanged.\nfrom_currency (str): The currency code of the currency being exchanged from.\nto_currency (str): The currency code of the currency being exchanged to.\nexchange_rate (float): The rate at which the from_currency is exchanged to the to_currency.",
    "HumanEval/111": "data (List[int]): A list of integers representing the data set for which the histogram is to be generated.\nbins (int): The number of bins to divide the data into for the histogram.\nrange (Tuple[int, int], optional): A tuple specifying the lower and upper range of the bins. If not provided, the range is automatically determined from the data.\nnormalize (bool, optional): A boolean flag indicating whether to normalize the histogram. If True, the histogram is normalized to form a probability density, i.e., the area under the histogram will sum to 1.",
    "HumanEval/112": "string (str): The original string from which characters will be deleted.\nchars_to_remove (str): A string containing all characters that need to be removed from the original string.",
    "HumanEval/113": "numbers (List[int]): A list of integers to be evaluated for odd numbers.",
    "HumanEval/114": "arr (List[int]): A list of integers representing the array from which the minimum subarray sum is to be calculated.\nlength (int): An integer representing the length of the subarray for which the sum is to be minimized.",
    "HumanEval/115": "container (List[float]): A list of floating-point numbers representing the current fill levels of various containers.\nmax_capacity (float): A floating-point number representing the maximum capacity that any container can hold.",
    "HumanEval/116": "array (List[int]): A list of integers that needs to be sorted.\nreverse (bool): A boolean flag indicating whether the array should be sorted in descending order. Defaults to False, meaning the array will be sorted in ascending order if not specified.",
    "HumanEval/117": "text (str): The input string from which words will be selected.\nlength (int): The minimum length of words to be selected from the input string.\nexclude (List[str]): A list of words to be excluded from the selection process.",
    "HumanEval/118": "input_string (str): The string in which the function will search for the closest vowel to a given character.\ncharacter (str): The character for which the function will find the closest vowel in the input string.",
    "HumanEval/119": "- s (str): A string containing a sequence of characters, which may include parentheses.\n- open_paren (str): A character representing the opening parenthesis to match.\n- close_paren (str): A character representing the closing parenthesis to match.",
    "HumanEval/120": "numbers (List[float]): A list of floating-point numbers from which the maximum value is to be determined.",
    "HumanEval/121": "number (float): The number to be truncated. This is the input floating-point number that needs to be truncated to a certain precision or format.",
    "HumanEval/122": "list1 (List[int]): The first list of integers to be added.\nlist2 (List[int]): The second list of integers to be added.",
    "HumanEval/123": "n (int): The starting integer for the Collatz sequence. It should be a positive integer greater than zero.",
    "HumanEval/124": "date_string (str): A string representing a date, which needs to be validated for correctness.\nformat (str): A string representing the expected format of the date_string, typically using format codes like '%Y-%m-%d'.",
    "HumanEval/125": "text (str): The input string that needs to be split into individual words.\nseparator (str, optional): The delimiter used to split the words in the text. Defaults to whitespace if not provided.",
    "HumanEval/126": "lst (List[int]): A list of integers that needs to be checked for sorted order.\nreverse (bool): An optional boolean parameter that indicates whether to check for descending order instead of ascending. Defaults to False.",
    "HumanEval/127": "list1 (List[int]): The first list of integers to find the intersection with.\nlist2 (List[int]): The second list of integers to find the intersection with.",
    "HumanEval/128": "numbers (List[int]): A list of integers for which the function will determine the product of their signs. Each integer in the list can be positive, negative, or zero.",
    "HumanEval/129": "grid (List[List[int]]): A 2D list representing a grid of integers where each cell contains a non-negative integer. The grid is used to determine the minimum path sum from the top-left corner to the bottom-right corner, moving only down or right at any point in time.",
    "HumanEval/130": "a (float): The length of the first side of the triangle.\nb (float): The length of the second side of the triangle.\nc (float): The length of the third side of the triangle.",
    "HumanEval/131": "number (float): The floating-point number that needs to be truncated to a specified number of decimal places.\nplaces (int): The number of decimal places to which the number should be truncated.",
    "HumanEval/132": "expression (str): A string representing a mathematical expression containing parentheses.\nopen_paren (str): A string representing the character used for opening parentheses, typically '('.\nclose_paren (str): A string representing the character used for closing parentheses, typically ')'.",
    "HumanEval/133": "numbers (List[int]): A list of integers for which the function will calculate the sum of their squares.",
    "HumanEval/134": "input_string (str): The string that needs to be checked to determine if its last character is a letter.",
    "HumanEval/135": "arr (List[int]): A list of integers that need to be rearranged.\nk (int): An integer representing the divisor for checking the arrangement condition.",
    "HumanEval/136": "numbers (List[int]): A list of integers from which the function will determine the largest and smallest values.",
    "HumanEval/137": "a (Any): The first element to be compared. This can be of any data type.\nb (Any): The second element to be compared. This can also be of any data type.",
    "HumanEval/138": "numbers (List[int]): A list of integers that will be evaluated to determine if any two numbers sum to an even number.",
    "HumanEval/139": "n (int): The number for which the special factorial is to be calculated. It should be a non-negative integer.\nmode (str): A string indicating the mode of calculation. It can be 'standard' for a regular factorial or 'special' for a modified version of the factorial calculation.",
    "HumanEval/140": "text (str): The input string that may contain irregular spacing, including leading, trailing, or multiple spaces between words.",
    "HumanEval/141": "file_name (str): The name of the file to be checked, including its extension.\nallowed_extensions (List[str]): A list of allowed file extensions that the file_name can have.",
    "HumanEval/142": "numbers (List[int]): A list of integers for which the function will calculate the sum of their squares.",
    "HumanEval/143": "sentence (str): A string representing the sentence from which words need to be extracted.",
    "HumanEval/144": "expression (str): A string representing a mathematical expression that may contain redundant or unnecessary elements such as extra parentheses or zero coefficients.\nvariables (List[str]): A list of variable names that may appear in the expression. This helps in identifying and simplifying terms related to these variables.",
    "HumanEval/145": "- players (List[dict]): A list of dictionaries where each dictionary represents a player. Each dictionary contains at least a 'name' key (str) and a 'points' key (int) representing the player's name and their score, respectively.\n- descending (bool): A boolean flag indicating the order of sorting. If True, the players are sorted in descending order of points. If False, they are sorted in ascending order. Default is True.",
    "HumanEval/146": "input_list (List[int]): A list of integers that the function will process to filter out specific elements based on certain criteria.\nthreshold (int): An integer value that serves as a benchmark for filtering elements from the input_list. Elements in the input_list are compared against this threshold to determine if they should be included in the output.\nmode (str): A string that specifies the filtering mode. It determines the criteria used to filter the elements from the input_list. Common modes might include 'greater', 'less', or 'equal', which would filter elements greater than, less than, or equal to the threshold, respectively.",
    "HumanEval/147": "lst (List[int]): A list of integers from which the function will identify triples.\nthreshold (int): An integer value that sets the minimum sum for a triple to be considered valid.",
    "HumanEval/148": "number (float): The number to be truncated. This is the input value that will be processed by the function to remove any decimal places beyond a certain precision.\nprecision (int): The number of decimal places to which the number should be truncated. This parameter determines the level of precision for the truncation process.",
    "HumanEval/149": "sorted_list (List[int]): A list of integers that is already sorted in non-decreasing order.\nthreshold (int): An integer value that serves as a threshold. Only elements in the sorted_list that are less than or equal to this threshold will be considered for the sum.",
    "HumanEval/150": "x (int): The first integer to be compared.\ny (int): The second integer to be compared.",
    "HumanEval/151": "a (int): The first integer value.\nb (int): The second integer value.",
    "HumanEval/152": "a (Any): The first value to be compared. This can be of any data type that supports comparison operations.\nb (Any): The second value to be compared. This should be of the same data type as 'a' to ensure valid comparison.",
    "HumanEval/153": "input_list (List[str]): A list of strings representing different extensions or versions.\ncriteria (str): A string that specifies the criteria for determining the strongest extension. This could be a version number, a specific feature, or any other distinguishing factor.",
    "HumanEval/154": "pattern (str): The pattern string that needs to be checked for cyclic occurrences within the text.\ntext (str): The text string in which the pattern is to be checked for cyclic occurrences.",
    "HumanEval/155": "numbers (List[int]): A list of integers that need to be evaluated to count how many are even and how many are odd.",
    "HumanEval/156": "number (int): The integer value that needs to be converted into a mini Roman numeral representation. The function expects a positive integer as input, typically within a range that can be represented by Roman numerals (e.g., 1 to 3999).",
    "HumanEval/157": "base (float): The length of the base of the right-angle triangle.\nheight (float): The length of the height of the right-angle triangle.",
    "HumanEval/158": "numbers (List[float]): A list of floating-point numbers from which the maximum value is to be found.",
    "HumanEval/159": "number (int or float): The total amount of food available to be eaten.\nneed (int or float): The amount of food required to satisfy hunger.\nremaining (int or float): The amount of food left after eating.",
    "HumanEval/160": "operator (str): A string representing the mathematical operation to be performed. It can be one of the following: '+', '-', '*', or '/'.\noperand (float): A numerical value that will be used in the operation with a predefined constant or another operand.",
    "HumanEval/161": "s (str): A string input that represents the problem or equation to be solved. This string may contain mathematical expressions, equations, or other types of problems that the function is designed to handle.",
    "HumanEval/162": "text (str): The input string that needs to be converted into an MD5 hash.",
    "HumanEval/163": "a (int): The starting integer of the range.\nb (int): The ending integer of the range."
}