{
    "HumanEval/0": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Determine if there are any two elements in the provided list of numbers that are within the specified threshold distance from each other.\"\"\"",
    "HumanEval/1": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"This function receives a string composed of various nested parenthesis groups. It aims to isolate these groups into distinct strings, ensuring each group is balanced (every opening parenthesis has a corresponding closing parenthesis) and not nested within another. Spaces in the input string should be disregarded.\"\"\"",
    "HumanEval/2": "def truncate_number(number: float) -> float:\n    \"\"\"Take a positive floating point number and break it down into its integer component (the highest whole number less than the number) and its fractional component (the remainder, always less than 1).\n\n    Return only the fractional part of the number.\"\"\"",
    "HumanEval/3": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"This function receives a list of banking transactions, both deposits and withdrawals, starting from an initial balance of zero. It checks whether the balance drops below zero at any time during these transactions. If it does, the function returns True; otherwise, it returns False.\"\"\"",
    "HumanEval/4": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"Compute the Mean Absolute Deviation (MAD) for a provided list of numbers. MAD represents the average of the absolute differences between each number in the list and the list's mean value.\n    MAD is calculated as: MAD = average | x - x_mean |\"\"\"",
    "HumanEval/5": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Place the specified 'delimeter' number between each pair of adjacent items in the provided list `numbers`.\"\"\"",
    "HumanEval/6": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"This function receives a string containing various groups of nested parentheses, each group separated by spaces. It returns a list indicating the maximum depth of nesting for each group.\"\"\"",
    "HumanEval/7": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Return a list of strings from the provided list that include the specified substring.\"\"\"",
    "HumanEval/8": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"Calculate the total sum and the product of all elements in a provided list of integers. If the list is empty, the sum should be 0 and the product should be 1.\"\"\"",
    "HumanEval/9": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"Produce a list where each element is the maximum value encountered up to that point in the provided list of integers.\"\"\"",
    "HumanEval/10": "def make_palindrome(string: str) -> str:\n    \"\"\"Construct the minimal length palindrome starting with the given string by adding the reversed version of the initial segment (before the palindromic part) to its end.\"\"\"",
    "HumanEval/11": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"Receive two binary strings, 'a' and 'b', composed exclusively of 1s and 0s. Execute a binary XOR operation between them and return the resulting binary string.\"\"\"",
    "HumanEval/12": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"From a given list of strings, identify and return the string with the maximum length. If there are several strings with the same maximum length, return the first one encountered. If the list is empty, return None.\"\"\"",
    "HumanEval/13": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Calculate and return the highest common factor of the two provided integers, a and b.\"\"\"",
    "HumanEval/14": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"Generate a list containing all the prefixes of the provided string, arranged from the shortest to the longest.\"\"\"",
    "HumanEval/15": "def string_sequence(n: int) -> str:\n    \"\"\"Generate a string that lists numbers from 0 to n, inclusive, separated by spaces.\"\"\"",
    "HumanEval/16": "def count_distinct_characters(string: str) -> int:\n    \"\"\"Calculate the number of unique characters in a string, ignoring differences in uppercase and lowercase.\"\"\"",
    "HumanEval/17": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"This function receives a string that encodes musical notes using a specific ASCII representation. It is required to interpret this string and produce a list of integers, where each integer indicates the duration in beats of the corresponding note.\n\n    Legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\"\"\"",
    "HumanEval/18": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"Calculate the number of occurrences of a specified substring within a given string, including overlaps.\"\"\"",
    "HumanEval/19": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"Receives a string of numerals ('zero' to 'nine') separated by spaces. The function sorts these numerals in ascending order from 'zero' to 'nine' and returns the sorted sequence as a string.\"\"\"",
    "HumanEval/20": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"Identify and return a pair of numbers from a provided list (which contains at least two numbers) that are nearest to each other, presented as a tuple with the smaller number first.\"\"\"",
    "HumanEval/21": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Transform a list of numbers (which must contain at least two elements) so that the minimum value is adjusted to 0 and the maximum value to 1.\"\"\"",
    "HumanEval/22": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"Extract and return only the integer values from a provided list containing various types of elements.\"\"\"",
    "HumanEval/23": "def strlen(string: str) -> int:\n    \"\"\"Calculate and return the number of characters in the provided string.\"\"\"",
    "HumanEval/24": "def largest_divisor(n: int) -> int:\n    \"\"\"Identify the highest divisor of the number n that is less than n itself.\"\"\"",
    "HumanEval/25": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Generate a list of prime factors for a specified integer, arranged from the smallest to the largest. Each factor is repeated in the list according to its multiplicity in the factorization of the integer. The product of these factors should equal the original input number.\"\"\"",
    "HumanEval/26": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"Eliminate any repeated integers from a list, ensuring that the remaining integers retain their original order from the input list.\"\"\"",
    "HumanEval/27": "def flip_case(string: str) -> str:\n    \"\"\"Convert each character in the provided string from lowercase to uppercase and vice versa.\"\"\"",
    "HumanEval/28": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Merge a list of strings into one continuous string. \"\"\"",
    "HumanEval/29": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"Select and return strings from a list that begin with the specified prefix.\"\"\"",
    "HumanEval/30": "def get_positive(l: list):\n    \"\"\"Extract and return all the positive integers from the provided list.\"\"\"",
    "HumanEval/31": "def is_prime(n):\n    \"\"\"Determine if the specified number is prime. Returns true for prime numbers and false for non-prime numbers.\"\"\"",
    "HumanEval/32": "def find_zero(xs: list):\n    \"\"\"This function takes a list of coefficients for a polynomial. It calculates and returns a single root where the polynomial equals zero. The function is designed to handle only polynomials with an even number of coefficients and requires the largest coefficient to be non-zero, ensuring the existence of at least one root.\"\"\"",
    "HumanEval/33": "def sort_third(l: list):\n    \"\"\"Accepts a list 'l' and produces a new list 'l'' where elements at indices not divisible by three remain unchanged, and elements at indices divisible by three are sorted based on their values in 'l'.\"\"\"",
    "HumanEval/34": "def unique(l: list):\n    \"\"\"Produce a list of distinct elements from the input list, sorted in ascending order.\"\"\"",
    "HumanEval/35": "def max_element(l: list):\n    \"\"\"Identify and return the largest value from the provided list.\"\"\"",
    "HumanEval/36": "def fizz_buzz(n: int):\n    \"\"\"Calculate how often the digit 7 is present in numbers smaller than n that are multiples of either 11 or 13.\"\"\"",
    "HumanEval/37": "def sort_even(l: list) -> list:\n    \"\"\"Accepts a list l and produces a new list l' where the elements at odd indices are the same as in l, and the elements at even indices are sorted versions of those at the even indices in l.\"\"\"",
    "HumanEval/38": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"Reverses the encoding applied by the encode_cyclic function to restore and return the original string.\"\"\"",
    "HumanEval/39": "def prime_fib(n: int):\n    \"\"\"Retrieve the n-th Fibonacci number that is also a prime number.\"\"\"",
    "HumanEval/40": "def triples_sum_to_zero(l: list):\n    \"\"\"This function receives a list of integers and checks if any three unique numbers within the list add up to zero. It returns True if such a triplet exists, otherwise it returns False.\"\"\"",
    "HumanEval/41": "def car_race_collision(n: int):\n    \"\"\"Consider a scenario where a road extends infinitely in a straight line. On this road, n cars are traveling from left to right, and simultaneously, another set of n cars are moving from right to left. Initially, these two groups of cars are far apart. All cars travel at the same speed. A collision occurs when a car moving left to right meets a car moving right to left. Despite collisions, cars are indestructible and continue their path unaffected. The function calculates and returns the total number of these collisions.\"\"\"",
    "HumanEval/42": "def incr_list(l: list):\n    \"\"\"Produce a list where each element is increased by one from the original list.\"\"\"",
    "HumanEval/43": "def pairs_sum_to_zero(l):\n    \"\"\"This function accepts a list of integers and checks for the presence of any two unique numbers whose sum equals zero. It returns True if such a pair exists, otherwise it returns False.\"\"\"",
    "HumanEval/44": "def change_base(x: int, base: int):\n    \"\"\"Convert the number x from its current base to a specified base, which is less than 10. The function returns the converted number as a string.\"\"\"",
    "HumanEval/45": "def triangle_area(a, h):\n    \"\"\"Calculate the area of a triangle using the provided side length and corresponding height.\"\"\"",
    "HumanEval/46": "def fib4(n: int):\n    \"\"\" Calculate the nth element of the Fib4 sequence, which is similar to the Fibonacci sequence but with its own unique initial values and recurrence relation:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) for n >= 4 -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Implement this function efficiently without using recursion. \"\"\"",
    "HumanEval/47": "def median(l: list):\n    \"\"\"Calculate and return the median value from the list l.\"\"\"",
    "HumanEval/48": "def is_palindrome(text: str):\n    \"\"\"Determines whether the provided string reads the same forwards and backwards.\"\"\"",
    "HumanEval/49": "def modp(n: int, p: int):\n    \"\"\"Calculate the remainder of 2 raised to the power of n divided by p, taking into account numerical stability.\"\"\"",
    "HumanEval/50": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"Accepts a string that was encoded using the encode_shift function and returns the original, decoded string.\"\"\"",
    "HumanEval/51": "def remove_vowels(text: str) -> str:\n    \"\"\"This function accepts a string and returns a new string with all vowels excluded.\"\"\"",
    "HumanEval/52": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Check if every element in the list l is less than the specified threshold t. If this condition is met for all elements, return True.\"\"\"",
    "HumanEval/53": "def add(x: int, y: int):\n    \"\"\"Compute the sum of two integers, x and y.\"\"\"",
    "HumanEval/54": "def same_chars(s0: str, s1: str):\n    \"\"\"Determine whether two strings consist of identical characters.\"\"\"",
    "HumanEval/55": "def fib(n: int):\n    \"\"\"Calculate the Fibonacci number at the n-th position in the sequence.\"\"\"",
    "HumanEval/56": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"This function takes a string consisting of '<' and '>' characters. It returns True if each '<' character is matched with a corresponding '>' character.\"\"\"",
    "HumanEval/57": "def monotonic(l: list):\n    \"\"\"Check if the list 'l' is sorted in a way that its elements are either consistently increasing or consistently decreasing. Return True if so.\"\"\"",
    "HumanEval/58": "def common(l1: list, l2: list):\n    \"\"\"Identify elements that appear in both lists, remove duplicates, and return them in a sorted order.\"\"\"",
    "HumanEval/59": "def largest_prime_factor(n: int):\n    \"\"\"Identify and return the highest prime factor of the specified integer n, where n is assumed to be greater than 1 and is not a prime itself.\"\"\"",
    "HumanEval/60": "def sum_to_n(n: int):\n    \"\"\"Calculate the total of all integers from 1 up to and including n.\"\"\"",
    "HumanEval/61": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"Examine a string consisting solely of '(' and ')'. The function returns True if each '(' is matched with a corresponding ')'.\"\"\"",
    "HumanEval/62": "def derivative(xs: list):\n    \"\"\"Given a list of coefficients representing a polynomial (where xs[0] is the constant term, xs[1] is the coefficient of x, and so on), calculate and return the coefficients of the polynomial's derivative in the same format.\"\"\"",
    "HumanEval/63": "def fibfib(n: int):\n    \"\"\" Calculate the n-th term of the FibFib sequence, which is a variant of the Fibonacci sequence. The sequence is defined as follows:\n    fibfib(0) = 0,\n    fibfib(1) = 0,\n    fibfib(2) = 1,\n    fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3) for n > 2.\n    This function aims to compute the n-th term of this sequence efficiently. \"\"\"",
    "HumanEval/64": "def vowels_count(s: str) -> int:\n    \"\"\"This function, vowels_count, accepts a string (a word) and calculates the total number of vowels contained within it. The vowels considered are 'a', 'e', 'i', 'o', 'u', and 'y' (where 'y' counts only if it is the last character of the word).\"\"\"",
    "HumanEval/65": "def circular_shift(x, shift):\n    \"\"\"Perform a circular shift on the digits of the integer x by moving the digits to the right by the specified shift amount. Return the shifted number as a string. If the shift exceeds the number of digits, the digits should be returned in reverse order.\"\"\"",
    "HumanEval/66": "def digitSum(s):\n    \"\"\"This function accepts a string and calculates the total sum of the ASCII values of only the uppercase letters in the string.\"\"\"",
    "HumanEval/67": "def fruit_distribution(s: str, n: int) -> int:\n    \"\"\"This function receives a string indicating the combined count of apples and oranges in a fruit basket, which also contains mangoes, along with an integer representing the total fruit count. The function should calculate and return the quantity of mangoes in the basket.\"\"\"",
    "HumanEval/68": "def pluck(arr):\n    \"\"\"This function takes an array that symbolizes a tree branch with non-negative integer nodes. It is designed to identify and return the node with the lowest even value. If there are several nodes with the same smallest even value, the one with the lowest index should be returned. The result should be presented as a list containing the smallest even value and its index, [smallest_value, its_index]. If no even values exist or the array is empty, return an empty list, [].\"\"\"",
    "HumanEval/69": "def search(lst):\n    '''Receive a non-empty list of positive integers and identify the largest integer that exceeds zero and appears in the list at least as many times as its own value. The frequency of an integer is defined by its number of occurrences within the list. If no integer meets these criteria, return -1.'''",
    "HumanEval/70": "def strange_sort_list(lst):\n    '''\n    Takes a list of integers and returns it sorted in an unusual pattern. This pattern involves alternating between the smallest and largest remaining values in the list, starting with the smallest.\n    '''",
    "HumanEval/71": "def triangle_area(a, b, c):\n    '''Calculate the area of a triangle using the lengths of its three sides, rounded to two decimal places. If the sides do not form a valid triangle (where the sum of any two sides must exceed the third), return -1.'''",
    "HumanEval/72": "def will_it_fly(q, w):\n    '''\n    This function determines whether an object q can fly. It returns True if q is a palindrome (symmetric list) and the total weight of its elements does not exceed the maximum allowable weight w. Otherwise, it returns False.\n    '''",
    "HumanEval/73": "def smallest_change(arr):\n    \"\"\"Determine the least number of modifications required to convert a given integer array, arr, into a palindrome. A palindrome is an array that reads identically from both ends. Each modification allows altering a single array element to any value.\"\"\"",
    "HumanEval/74": "def total_match(lst1, lst2):\n    '''\n    Create a function that takes two lists of strings and returns the list with the fewer total characters across all its strings. If both lists have an equal number of characters, the function should return the first list.\n    '''",
    "HumanEval/75": "def is_multiply_prime(a):\n    \"\"\"This function checks if the specified number can be expressed as the product of three prime numbers. It returns true if so, and false otherwise.\"\"\"",
    "HumanEval/76": "def is_simple_power(x, n):\n    \"\"\"Determine whether the number x can be expressed as n raised to the power of an integer. Return true if x equals n to the power of some integer, and false otherwise.\"\"\"",
    "HumanEval/77": "def iscube(a):\n    '''Determine whether the provided integer 'a' is the cube of another integer. The function should return True if 'a' can be expressed as the cube of an integer, otherwise False. It is assumed that the input is always a valid integer.'''",
    "HumanEval/78": "def hex_key(num: str) -> int:\n    \"\"\"Create a function that accepts a string representing a hexadecimal number and calculates how many of its digits are prime numbers. Hexadecimal digits include 0-9 and A-F, where A-F are always in uppercase. The prime digits in hexadecimal are 2, 3, 5, 7, B (11 in decimal), and D (13 in decimal). The function should return the count of these prime digits in the input string. Assume the input string is always a valid hexadecimal number or an empty string.\"\"\"",
    "HumanEval/79": "def decimal_to_binary(decimal):\n    \"\"\"Convert a given decimal number into its binary representation as a string. Each character in the resulting string will either be '0' or '1'. The output string will include the prefix and suffix 'db' to assist with formatting.\"\"\"",
    "HumanEval/80": "def is_happy(s: str) -> bool:\n    \"\"\"Determine whether the string 's' is considered happy. A happy string must have a minimum length of three, and every set of three consecutive characters within it must be unique.\"\"\"",
    "HumanEval/81": "def numerical_letter_grade(grades):\n    \"\"\"As the semester concludes, a teacher needs to assign letter grades to students based on their GPAs. Unfortunately, she has misplaced her grading algorithm. Your task is to create a function that converts a list of student GPAs into corresponding letter grades according to the specified scale:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\"\"\"",
    "HumanEval/82": "def prime_length(string):\n    \"\"\"This function receives a string and checks if its length is a prime number. It returns True if the length is prime, otherwise it returns False.\"\"\"",
    "HumanEval/83": "def starts_one_ends(n):\n    \"\"\"Calculate the total number of positive integers with n digits that either begin or conclude with the digit 1.\"\"\"",
    "HumanEval/84": "def solve(N):\n    \"\"\"Calculate and return the sum of all the digits in the binary representation of a positive integer N.\"\"\"",
    "HumanEval/85": "def add(lst):\n    \"\"\"Takes a non-empty list of integers, lst, and sums up the even numbers located at odd positions in the list.\"\"\"",
    "HumanEval/86": "def anti_shuffle(s):\n    \"\"\" This function accepts a string and outputs a version where each word is reordered. In this reordered version, the characters within each word are sorted in ascending order according to their ASCII values. The sequence of words and spaces in the original string is preserved. \"\"\"",
    "HumanEval/87": "def get_row(lst, x):\n    \"\"\"This function takes a 2D list 'lst' that resembles a matrix with variable-length rows and an integer 'x'. It searches for the integer 'x' within the list and returns a list of tuples [(x1, y1), (x2, y2), ...], where each tuple represents the coordinates (row, column) of 'x', starting from zero. The coordinates should be sorted first by row in ascending order and within the same row by column in descending order.\"\"\"",
    "HumanEval/88": "def sort_array(array):\n    \"\"\"\n    This function takes an array of non-negative integers and returns a sorted copy of it. The sorting direction depends on the sum of the first and last elements of the array: if this sum is odd, the array is sorted in ascending order; if even, in descending order.\n\n    Note:\n    * The original array should remain unchanged.\n    \"\"\"",
    "HumanEval/89": "def encrypt(s: str) -> str:\n    \"\"\"This function, named encrypt, accepts a string and produces an encrypted version of it by rotating the alphabet. Specifically, each letter in the string is shifted by four positions down the alphabet.\"\"\"",
    "HumanEval/90": "def next_smallest(lst):\n    \"\"\"Given a list of integers, this function identifies and returns the second smallest unique number in the list. If the list does not contain at least two unique numbers, the function returns None.\n\n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\"\"\"",
    "HumanEval/91": "def is_bored(S: str) -> int:\n    \"\"\"Receive a string composed of various sentences, and calculate how many sentences express boredom. A sentence is considered to express boredom if it begins with 'I'. Sentences are separated by '.', '?' or '!' symbols.\"\"\"",
    "HumanEval/92": "def any_int(x, y, z):\n    '''\n    This function accepts three integer parameters. It checks if any one of these integers is the sum of the other two. If this condition is met, it returns true; otherwise, it returns false.\n    '''",
    "HumanEval/93": "def encode(message: str) -> str:\n    \"\"\" This function accepts a message and encodes it by toggling the case of each letter and substituting each vowel with the letter two positions forward in the English alphabet. Only alphabetic characters are considered. \"\"\"",
    "HumanEval/94": "def skjkasdkd(lst):\n    \"\"\"Given a list of integers, this function identifies the highest prime number in the list and returns the sum of its digits.\"\"\"",
    "HumanEval/95": "def check_dict_case(dict):\n    \"\"\"Examine a dictionary to determine if all its keys are either entirely lowercase or uppercase strings. The function returns True if this condition is met, and False otherwise, including when the dictionary is empty.\"\"\"",
    "HumanEval/96": "def count_up_to(n):\n    \"\"\"Create a function that accepts a non-negative integer and outputs a list containing the first n prime numbers that are smaller than n.\"\"\"",
    "HumanEval/97": "def multiply(a, b):\n    \"\"\"This function receives two integers and computes the product of their last digits. It is guaranteed that the inputs provided are valid integers.\"\"\"",
    "HumanEval/98": "def count_upper(s: str) -> int:\n    \"\"\"Calculate the total number of uppercase vowels located at even index positions within a given string s.\"\"\"",
    "HumanEval/99": "def closest_integer(value):\n    '''\n    Develop a function that accepts a string input representing a numerical value and returns the nearest whole number to it. If the number is exactly halfway between two integers, it should be rounded in a direction away from zero.\n    '''",
    "HumanEval/100": "def make_a_pile(n):\n    \"\"\"Construct a pile consisting of n levels using stones, where the initial level contains n stones. For subsequent levels, add stones based on the parity of n: if n is odd, use the subsequent odd number; if even, the next even number. The function returns a list where each element at index i indicates the stone count at level (i+1).\"\"\"",
    "HumanEval/101": "def words_string(s: str) -> List[str]:\n    \"\"\"Receive a string containing words that are divided by commas or spaces. The function should break the string into individual words and return them as a list.\"\"\"",
    "HumanEval/102": "def choose_num(x, y):\n    \"\"\"Accepts two positive integers, x and y, and identifies the largest even number within the inclusive range from x to y. If no even numbers exist in this range, the function returns -1.\"\"\"",
    "HumanEval/103": "def rounded_avg(n, m):\n    \"\"\"Calculate the average of all integers between n and m, inclusive. Round this average to the nearest whole number and then convert this integer to its binary form. If n exceeds m, the function should return -1.\"\"\"",
    "HumanEval/104": "def unique_digits(x):\n    \"\"\"This function takes a list of positive integers x and returns a sorted list of numbers that consist exclusively of odd digits. The resulting list should be in ascending order.\"\"\"",
    "HumanEval/105": "def by_length(arr):\n    \"\"\" Sorts an array of integers that fall within the range of 1 to 9, reverses the sorted array, and converts each integer to its corresponding English word ('One' through 'Nine'). Returns an empty array if the input array is empty. \"\"\"",
    "HumanEval/106": "def f(n):\n    \"\"\" Create a function named f that accepts an integer n and returns a list of length n. Each element at index i in the list is calculated as follows: if i is even, the element is the factorial of i (product of all integers from 1 to i); if i is odd, the element is the sum of all integers from 1 to i. Indexing starts from 1. \"\"\"",
    "HumanEval/107": "def even_odd_palindrome(n):\n    \"\"\"For a given positive integer n, this function returns a tuple containing the counts of even and odd numeric palindromes from 1 to n, inclusive. Conditions:\n        1. 1 <= n <= 10^3\n        2. The tuple consists of counts of even and odd palindromes, in that order.\"\"\"",
    "HumanEval/108": "def count_nums(arr):\n    \"\"\"Create a function count_nums that accepts an array of integers and calculates how many of these integers have a digit sum greater than zero. For negative numbers, the first digit is considered negative.\"\"\"",
    "HumanEval/109": "def move_one_ball(arr):\n    \"\"\"Given an array 'arr' containing N unique integers in a random order, this function checks if the array can be sorted in non-decreasing order by repeatedly applying a right shift operation. A right shift moves each element of the array one position to the right, with the last element moving to the first position. The function returns True if sorting is achievable through such shifts, and False otherwise. It returns True immediately if the array is empty.\"\"\"",
    "HumanEval/110": "def exchange(lst1, lst2):\n    \"\"\"This function receives two lists of numbers and checks if elements can be swapped between them such that lst1 becomes entirely composed of even numbers. Unlimited swaps are allowed. If achieving an all-even lst1 is feasible through swaps, the function returns 'YES'. If not, it returns 'NO'.\"\"\"",
    "HumanEval/111": "def histogram(test):\n    \"\"\"This function takes a string of space-separated lowercase letters and returns a dictionary with the most frequently occurring letter(s) and their respective counts. If multiple letters have the same highest frequency, include all such letters in the dictionary.\"\"\"",
    "HumanEval/112": "def reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    \"\"\"Given two strings, s and c, remove all characters from s that match any character in c. After removal, verify if the resulting string is a palindrome, which is a string that reads the same forwards and backwards. Return a tuple with the modified string and a boolean indicating whether it is a palindrome.\"\"\"",
    "HumanEval/113": "def odd_count(lst):\n    \"\"\"Accepts a list of numeric strings and returns a list where each entry corresponds to the count of odd digits in the respective string from the input list.\"\"\"",
    "HumanEval/114": "def minSubArraySum(nums):\n    \"\"\"Identify the smallest possible sum of a contiguous sub-array within the provided array of integers, nums. The sub-array must contain at least one element.\"\"\"",
    "HumanEval/115": "def max_fill(grid, capacity):\n    import math\n    \"\"\"Given a rectangular grid representing a series of wells, where each row is a well and each '1' indicates a unit of water, determine how many times buckets must be used to completely extract the water. Each bucket has a fixed capacity and is used to draw water from these wells. Return the total number of bucket operations required to empty all the wells under the following conditions:\n        * Each well is of uniform length\n        * The grid can have up to 100 rows and each row can have up to 100 units\n        * Each cell in the grid is either 0 (no water) or 1 (water)\n        * Bucket capacity ranges from 1 to 10 units\n    \"\"\"",
    "HumanEval/116": "def sort_array(arr):\n    \"\"\"Sort an array of non-negative integers by first counting the number of ones in their binary forms and ordering them in increasing order. If two numbers have the same count of ones, they should be sorted by their numerical value.\"\"\"",
    "HumanEval/117": "def select_words(s: str, n: int) -> List[str]:\n    \"\"\"This function takes a string s and an integer n, and returns a list of words from s that have precisely n consonants. The words are returned in the order they appear in s. If s is an empty string, the function returns an empty list. It is assumed that s only contains letters and spaces.\"\"\"",
    "HumanEval/118": "def get_closest_vowel(word):\n    \"\"\"Receive a word and identify the nearest vowel, from the right, that is sandwiched between two consonants, excluding vowels at the start or end of the word. Return an empty string if no such vowel exists. The function assumes the input consists solely of English letters.\"\"\"",
    "HumanEval/119": "def match_parens(lst):\n    '''Receive a list containing two strings, each composed solely of open '(' and close ')' parentheses. The task is to determine if there exists any sequence in which these two strings can be joined such that the combined string is balanced. A string is deemed balanced if every open parenthesis is properly closed. The function should return 'Yes' if a balanced string can be formed, and 'No' if it cannot.'''",
    "HumanEval/120": "def maximum(arr, k):\n    \"\"\"Accepts an array 'arr' of integers and a positive integer 'k'. The function outputs a list, sorted in ascending order, containing the top 'k' largest integers from the array.\"\"\"",
    "HumanEval/121": "def solution(lst):\n    \"\"\"Calculate the total of all odd numbers located at even indices within a provided non-empty list of integers.\"\"\"",
    "HumanEval/122": "def add_elements(arr, k):\n    \"\"\"Calculate the total of elements that have no more than two digits, using only the first k elements of the integer array arr.\"\"\"",
    "HumanEval/123": "def get_odd_collatz(n):\n    \"\"\"For a given positive integer n, generate the Collatz sequence and return a list of the odd numbers from this sequence, sorted in ascending order. The Collatz sequence is created by repeatedly applying the rule: if the current number is even, divide it by two; if it's odd, multiply by three and add one. The sequence is theorized to always eventually reach one.\n\n    Note:\n        1. Collatz(1) results in [1].\n        2. The list is returned in increasing order.\"\"\"",
    "HumanEval/124": "def valid_date(date):\n    \"\"\"This function checks the validity of a provided date string. It returns True if the date meets the following criteria, otherwise it returns False:\n    1. The date string must not be empty.\n    2. For months 1, 3, 5, 7, 8, 10, and 12, the day must be between 1 and 31. For months 4, 6, 9, and 11, the day must be between 1 and 30. For February (month 2), the day must be between 1 and 29.\n    3. The month value must be between 1 and 12.\n    4. The date format should be mm-dd-yyyy.\"\"\"",
    "HumanEval/125": "def split_words(txt):\n    '''This function takes a string input and splits it into a list of words based on whitespace. If the string contains no whitespaces, it splits based on commas ','. If neither whitespaces nor commas are present, the function returns the count of lowercase alphabetic characters that have an odd position in the alphabet (considering 'a' as position 0, 'b' as 1, and so on up to 'z').'''\n",
    "HumanEval/126": "def is_sorted(lst):\n    '''Check if a list of integers is in non-decreasing order. Return False if there are more than two occurrence of any number in the list. The list is assumed to contain only non-negative integers.'''",
    "HumanEval/127": "def intersection(interval1, interval2):\n    \"\"\" Determine if the intersection length of two provided closed intervals, each defined as a pair of integers (start, end), is a prime number. Each interval includes its start and end points, and the start is always less than or equal to the end. If the intersection length is prime, return 'YES'; if not, return 'NO'. If there is no intersection between the intervals, also return 'NO'. \"\"\"",
    "HumanEval/128": "def prod_signs(arr):\n    \"\"\"Given an array of integers, calculate the sum of the absolute values of the integers, each multiplied by the product of the signs (1 for positive, -1 for negative, 0 for zero) of all numbers in the array. If the array is empty, return None.\"\"\"",
    "HumanEval/129": "def minPath(grid, k):\n    \"\"\"This function takes a grid of N x N cells, where each cell contains a unique integer from 1 to N*N, and a positive integer k. The goal is to determine the shortest possible path that spans exactly k cells. You may start from any cell and move to adjacent cells (those sharing an edge). The path must remain within the grid boundaries. A path is deemed shorter if the sequence of values in the cells it traverses is lexicographically smaller than those of another path of the same length. The function returns the sequence of values from the cells of the shortest path, ensuring this sequence is unique.\"\"\"",
    "HumanEval/130": "def tri(n):\n    \"\"\"While the Fibonacci sequence is widely recognized and extensively studied, the lesser-known Tribonacci sequence also presents intriguing patterns. This sequence is defined as follows:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, for even n.\n    tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), for odd n. Given a non-negative integer n, this function returns the first n + 1 elements of the Tribonacci sequence.\"\"\"",
    "HumanEval/131": "def digits(n):\n    \"\"\"Calculate the product of all odd digits in a positive integer n. If n contains only even digits, return 0.\"\"\"",
    "HumanEval/132": "def is_nested(string: str) -> bool:\n    '''This function accepts a string consisting solely of square brackets. It returns True if there exists at least one correctly nested subsequence of brackets within the string.'''",
    "HumanEval/133": "def sum_squares(lst):\n    \"\"\"Receive a list of numerical values. The function computes the sum of the squares of these numbers, but only after rounding each number in the list upwards to the nearest integer.\"\"\"",
    "HumanEval/134": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Develop a function that checks if the final character in a provided string is a letter that stands alone and not as part of a word. It returns True if this condition is met, and False otherwise. A 'word' is defined as a sequence of characters that are not separated by spaces.\n    '''",
    "HumanEval/135": "def can_arrange(arr):\n    \"\"\"This function identifies the highest position in an array where an element is found that is not larger than or equal to the one before it. If all elements are in non-decreasing order, the function returns -1. The array provided does not include any repeated elements.\"\"\"",
    "HumanEval/136": "def largest_smallest_integers(lst):\n    '''This function outputs a tuple (a, b), where 'a' represents the maximum negative integer and 'b' represents the minimum positive integer found in the list. If the list lacks negative or positive integers, their respective values in the tuple should be None.'''",
    "HumanEval/137": "def compare_one(a, b):\n    \"\"\" This function accepts two parameters which can be integers, floats, or strings that represent real numbers. It returns the larger of the two in their original type. If both values are the same, it returns None. Note: Real numbers in string format may use either a dot (.) or comma (,) as the decimal separator. \"\"\"",
    "HumanEval/138": "def is_equal_to_sum_even(n):\n    \"\"\"Determine if the specified number n can be expressed as the sum of four positive even integers.\"\"\"",
    "HumanEval/139": "def special_factorial(n):\n    \"\"\"Calculate the Brazilian factorial, which is the product of the factorials of all integers from n down to 1, defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n is a positive integer.\n\n    For instance:\n    >>> special_factorial(4)\n    288\n\n    This function accepts an integer and returns its Brazilian factorial.\"\"\"",
    "HumanEval/140": "def fix_spaces(text: str) -> str:\n    \"\"\"Transform a given string by substituting all spaces with underscores. Additionally, if there are more than two consecutive spaces in the string, replace these spaces with a single hyphen.\"\"\"",
    "HumanEval/141": "def file_name_check(file_name):\n    \"\"\"This function accepts a string that represents the name of a file and returns 'Yes' if the name adheres to specific validity criteria, otherwise it returns 'No'. A file name is deemed valid if it satisfies all of the following conditions:\n    - It contains no more than three numeric characters ('0'-'9').\n    - It includes exactly one period ('.').\n    - The part of the name before the period is not empty and begins with a Latin alphabet letter ('a'-'z' or 'A'-'Z').\n    - The extension following the period must be one of the following: ['txt', 'exe', 'dll'].\n    \"\"\"",
    "HumanEval/142": "def sum_squares(lst):\n    \"\"\" Receives a list of integers and processes each entry based on its index. If the index is a multiple of 3, the integer is squared; if the index is a multiple of 4 but not 3, the integer is cubed. Entries with indexes that are neither multiples of 3 nor 4 remain unchanged. The function returns the sum of all processed and unprocessed entries in the list.\n    \"\"\"",
    "HumanEval/143": "def words_in_sentence(sentence: str) -> str:\n    \"\"\"Receive a string that represents a sentence with words divided by spaces. Return a new string composed of words from the initial sentence that have prime number lengths, maintaining their original order. Constraints:\n        * The length of the sentence must be between 1 and 100.\n        * The sentence will only contain letters.\"\"\"",
    "HumanEval/144": "def simplify(x: str, n: str) -> bool:\n    \"\"\"This function simplifies the product of two fractions represented as strings, x and n, each in the format '<numerator>/<denominator>'. It checks if the result of multiplying these fractions results in an integer. The function returns True if the product is a whole number, and False otherwise. Both numerators and denominators are positive integers, and denominators are non-zero.\"\"\"",
    "HumanEval/145": "def order_by_points(nums):\n    \"\"\"Sort a list of integers in increasing order based on the sum of the digits of each number. If multiple numbers have the same digit sum, they should be ordered according to their original positions in the list.\"\"\"",
    "HumanEval/146": "def specialFilter(nums):\n    \"\"\"This function accepts an array of numbers and calculates how many numbers in the array exceed 10 and have both their first and last digits as odd numbers (1, 3, 5, 7, 9).\"\"\"",
    "HumanEval/147": "def get_max_triples(n):\n    \"\"\"Given a positive integer n, construct an integer array 'a' where the length of 'a' is n and each element a[i] is calculated as i * i - i + 1 for 1 \u2264 i \u2264 n. The function should return the count of triples (a[i], a[j], a[k]) in array 'a' such that i < j < k and the sum of a[i] + a[j] + a[k] is divisible by 3.\"\"\"",
    "HumanEval/148": "def bf(planet1, planet2):\n    '''\n    Our solar system consists of eight planets in order of distance from the Sun: Mercury, Venus, Earth, Mars, Jupiter, Saturn, Uranus, and Neptune. This function accepts two planet names, planet1 and planet2, as inputs. It returns a tuple of all planets that lie in the orbital path between planet1 and planet2, arranged in order of their closeness to the Sun. If either planet1 or planet2 is not a valid planet name, the function will return an empty tuple.\n    '''",
    "HumanEval/149": "def sorted_list_sum(lst):\n    \"\"\"This function takes a list of strings, removes those with odd lengths, and then sorts the remaining strings. The sorting is primarily by the length of the strings in ascending order. If strings are of equal length, they are sorted alphabetically. The function returns this sorted list of strings, which may include duplicates. It is guaranteed that the input will only contain strings, not numbers.\"\"\"",
    "HumanEval/150": "def x_or_y(n, x, y):\n    \"\"\"This function returns the value of x if n is a prime number, otherwise it returns the value of y.\"\"\"",
    "HumanEval/151": "def double_the_difference(lst):\n    '''Calculate the total of the squares for all odd numbers in a provided list, excluding any negative numbers or non-integers.'''",
    "HumanEval/152": "def compare(game, guess):\n    \"\"\"Reflect on the anticipation and outcome of eagerly awaited events by comparing actual results with predictions. This function assesses the accuracy of guesses against actual match results. Provided with two arrays of equal length\u2014one representing actual scores and the other guesses\u2014this function returns a new array indicating the accuracy of each guess. A perfect guess is marked by 0, while incorrect guesses are represented by the absolute difference between the actual score and the guess.\"\"\"",
    "HumanEval/153": "def Strongest_Extension(class_name, extensions):\n    \"\"\"Given a class name and a list of extension names, this function calculates the 'strength' of each extension based on the number of uppercase (CAP) and lowercase (SM) letters in its name, where strength is defined as CAP minus SM. The function returns the name of the strongest extension appended to the class name in the format 'ClassName.StrongestExtensionName'. If multiple extensions share the highest strength, the first listed extension is selected.\"\"\"",
    "HumanEval/154": "def cycpattern_check(a, b):\n    \"\"\"Given two strings, determine if the second string or any cyclic permutation of it appears as a substring within the first string. Return True if it does, otherwise return False.\"\"\"",
    "HumanEval/155": "def even_odd_count(num):\n    \"\"\"Accepts an integer and returns a tuple containing the counts of even and odd digits in the integer, respectively.\"\"\"",
    "HumanEval/156": "def int_to_mini_roman(number):\n    \"\"\" Convert a positive integer into its corresponding roman numeral representation, returned as a lowercase string. The function is limited to handling numbers between 1 and 1000 inclusive. \"\"\"",
    "HumanEval/157": "def right_angle_triangle(a, b, c):\n    '''\n    Determine if the provided side lengths (a, b, c) can form a right-angle triangle, where one angle measures exactly 90 degrees. The function returns True if they can form such a triangle, and False otherwise.\n    '''",
    "HumanEval/158": "def find_max(words):\n    \"\"\"This function takes a list of strings as input, each representing a word. It returns the word that has the highest number of distinct characters. In cases where more than one word has the same maximum number of unique characters, the word appearing earliest in lexicographical order is returned.\"\"\"",
    "HumanEval/159": "def eat(number, need, remaining):\n    \"\"\"As a rabbit, you've consumed a certain quantity of carrots already. This function calculates the total carrots you've eaten after attempting to satisfy your current hunger with available carrots, and reports how many carrots are left. It returns a list containing the total carrots eaten and the remaining carrots. If insufficient carrots are available, you consume all and remain hungry. Constraints are as follows:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Enjoy your meal! :)\"\"\"",
    "HumanEval/160": "def do_algebra(operator, operand):\n    \"\"\"This function takes two lists: 'operator', containing basic algebraic operators, and 'operand', containing integers. It constructs and evaluates an algebraic expression using these lists. The function returns the result of the expression.\n\n    Supported operations include:\n    Addition (+), Subtraction (-), Multiplication (*), Floor Division (//), and Exponentiation (**).\n    \"\"\"",
    "HumanEval/161": "def solve(s):\n    \"\"\" Given a string s, modify it by changing each letter to the opposite case (uppercase to lowercase, lowercase to uppercase). If there are no letters in the string, simply reverse the entire string. Return the modified string as the result. \"\"\"",
    "HumanEval/162": "def string_to_md5(text):\n    \"\"\"Convert the provided string 'text' into its corresponding md5 hash. If the input 'text' is an empty string, the function should return None.\"\"\"",
    "HumanEval/163": "def generate_integers(a, b):\n    \"\"\"Produce a list of even numbers that lie within the range specified by the two positive integers a and b, sorted in increasing order.\"\"\""
}